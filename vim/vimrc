" Douglas Daly
" Misc {{{

set nocompatible
set nocp
filetype plugin indent on

syntax enable
set backspace=indent,eol,start
set encoding=UTF-8
set visualbell
set autoread

" }}}
" Folding & Comments {{{

set modelines=1
set foldenable              " Enable code folding
set foldnestmax=10          " 10 nested folds max
set foldmethod=indent       " Fold based on indent level
set foldlevel=10            " Default fold level

" space open/closes folds
nnoremap <space> za

" }}}
" Spaces & Tabs {{{

set autoindent
set smarttab
set expandtab		        " Use spaces for tabs
set tabstop=4               " 4 spaces per tab
set softtabstop=4	        " 4 space tab
set shiftwidth=4

" }}}
" UI {{{

set number
set relativenumber

:set number relativenumber

:augroup numbertoggle
:  autocmd!
:  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
:  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
:augroup END

set ruler
set cursorline              " Current line highlight
set colorcolumn=73,80

set lazyredraw              " Only redraw when needed
set showmatch               " Highlight matching brackets
set wildmenu                " Visual autocomplete for command menu
set laststatus=2

set splitbelow
set splitright


" }}}
" Searching {{{

set incsearch               " Search as characters are entered
set hlsearch                " Highlight matches

" turn off search highlight shortcut
nnoremap // :nohlsearch<CR>
vnoremap // y/<C-R>"<CR>

" }}}
" Movement {{{

" move vertically by visual line
nnoremap j gj
nnoremap k gk

" Move between splits with Shift
nnoremap <S-h> <C-w>h
nnoremap <S-j> <C-w>j
nnoremap <S-k> <C-w>k
nnoremap <S-l> <C-w>l

" }}}
" Keyboard Shortcuts {{{

let mapleader=","           " Leader is a comma

" Shortcut to edit this file
noremap <leader>vim :edit ~/.vim/vimrc<CR>

" Easily add/remove blank lines from file
nnoremap <silent> <leader>k :set paste<CR>m`o<Esc>``:set nopaste<CR>
nnoremap <silent> <leader>j :set paste<CR>m`O<Esc>``:set nopaste<CR>

" Move between buffers
nnoremap <Tab> :bnext<CR>
nnoremap <S-Tab> :bprevious<CR>
nnoremap <C-x> :b#<bar>bd#<CR>

" Create window splits more easily
nnoremap <silent> vv <C-w>v
nnoremap <silent> ss <C-w>s

" Easier system copy/paste
"nnoremap <leader>y "*y
"nnoremap <leader>p "*p

" }}}
" Plugins {{{

call plug#begin()
" VIM helpers
Plug 'christoomey/vim-tmux-navigator'
Plug 'wesQ3/vim-windowswap'
Plug 'zhou13/vim-easyescape'
Plug 'svermeulen/vim-easyclip'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-repeat'

" Git
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'

" File related
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" UI
Plug 'jeetsukumaran/vim-buffergator'
Plug 'majutsushi/tagbar'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
"Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'Yggdroot/indentLine'

" Dev tools
Plug 'janko/vim-test'
Plug 'valloric/YouCompleteMe', { 'do': './install.py' }
Plug 'w0rp/ale'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'sheerun/vim-polyglot'

" Snippets
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" Misc. files
Plug 'editorconfig/editorconfig-vim'
Plug 'freitass/todo.txt-vim'

" Web
Plug 'mattn/emmet-vim'
Plug 'pangloss/vim-javascript'

" Python
"Plug 'Vimjas/vim-python-pep8-indent'

" Markdown
Plug 'plasticboy/vim-markdown'

" Misc. tools
Plug 'reedes/vim-pencil'

" (Needs to be called last)
Plug 'ryanoasis/vim-devicons'
Plug 'ervandew/supertab'
call plug#end()

" }}}
" Plugin Settings {{{

" Ack settings
if executable('ag')
    let g:ackprg = 'ag --vimgrep'
endif

" ALE Settings
let g:ale_python_auto_pipenv = 1
let g:ale_sign_column_always = 1

" Airline settings
let g:airline_theme='term'
let g:airline#extensions#tabline#enabled = 1

" BufferGator
map <C-b> :BuffergatorToggle<CR>

" Dev Icons Settings
let g:DevIconsEnableNERDTreeRedraw = 1
let g:WebDevIconsUnicodeGlyphDoubleWidth = 0
let g:WebDevIconsNerdTreeAfterGlyphPadding = '  '

" Easy-clip settings
nnoremap gm m

" Easy-escape settings
let g:easyescape_chars = { "j": 1, "k": 1 }
let g:easyescape_timeout = 200
cnoremap jk <ESC>
cnoremap kj <ESC>

" Indent Line
let g:indentLine_setConceal = 0

" Markdown
let g:vim_markdown_conceal = 0

" NERD Tree
map <C-n> :NERDTreeToggle<CR>
let g:NERDTreeAutoDeleteBuffer = 1
let g:NERDTreeMinimalUI = 1

autocmd FileType nerdtree setlocal nolist
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | wincmd p | ene | exe 'NERDTreeToggle' argv()[0] | endif
autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
autocmd BufEnter * if bufname('#') =~# "^NERD_tree_" | b# | endif

" Pencil configuration
let g:pencil#wrapModeDefault = 'soft'

augroup pencil
    autocmd!
    autocmd FileType text call pencil#init()
augroup END

" Python Syntax
let g:python_highlight_all = 1

" SuperTab
let g:SuperTabDefaultCompletionType = '<C-n>'
let g:SuperTabContextDefaultCompletionType = "<c-n>"

" Tagbar
nnoremap <C-m> :TagbarToggle<CR>
let g:tagbar_autofocus = 1
let g:tagbar_autoclose = 1
unmap <CR>

" Tmux Navigator
let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <S-h> :TmuxNavigateLeft<CR>
nnoremap <silent> <S-j> :TmuxNavigateDown<CR>
nnoremap <silent> <S-k> :TmuxNavigateUp<CR>
nnoremap <silent> <S-l> :TmuxNavigateRight<CR>
"nnoremap <silent> <S-/> :TmuxNavigatePrevious<CR>

" Ultisnips
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
let g:UltiSnipsListSnippets = "<c-tab>"
let g:UltiSnipsEditSplit = "vertical"

let g:UltiSnipsSnippetDirectories = [$HOME.'/.vim/my-snippets/UltiSnips', 'UltiSnips']

let g:ultisnips_python_style = "numpy"

" Vim-Test Settings
let test#strategy = "vimterminal"

" Window Swap
let g:windowswap_map_keys = 0
nnoremap <silent> <leader>yw :call WindowSwap#MarkWindowSwap()<CR>
nnoremap <silent> <leader>pw :call WindowSwap#DoWindowSwap()<CR>
nnoremap <silent> <leader>sw :call WindowSwap#EasyWindowSwap()<CR>

" YouCompleteMe settings
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_filetype_specific_completion_to_disable = {
    \ 'gitcommit': 1,
    \ 'swap': 1
    \ }

map <leader>g :YcmCompleter GoToDefinitionElseDeclaration<CR>

" }}}
" Custom Functions {{{

let s:hidden_all = 0
function! ToggleHiddenAll()
    if s:hidden_all == 0
        let s:hidden_all = 1
        set noshowmode
        set noruler
        set laststatus=0
        set noshowcmd
        exe 'AirlineToggle'
    else
        let s:hidden_all = 0
        set showmode
        set ruler
        set laststatus=2
        set showcmd
        exe 'AirlineToggle'
    endif
endfunction

nnoremap <C-h> :call ToggleHiddenAll()<CR>

let s:hidden_all = 0

" File extension highlighting for NERDTree
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
    let color_str = ''
    if a:fg != 'none'
        let color_str = color_str .' ctermfg=' . a:fg
    endif
    if a:bg != 'none'
        let color_str = color_str .' ctermbg=' . a:bg
    endif
    if a:guifg != 'none'
        let color_str = color_str .' guifg=' . a:guifg
    endif
    if a:guibg != 'none'
        let color_str = color_str .' guibg=' . a:guibg
    endif
    
    exec 'autocmd filetype nerdtree highlight ' . a:extension . color_str
    exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

" YCM Python Virtual Environments
function! SetPipenvPythonPath()
    let pipenv_venv_path = system('pipenv --venv')

    if shell_error == 0
        let venv_path = substitute(pipenv_venv_path, '\n', '', '')
        let g:ycm_python_binary_path = venv_path . '/bin/python'
    else
        let g:ycm_python_binary_path = 'python'
    endif
endfunction

" }}}
" File specific settings {{{

set conceallevel=0

" Python
autocmd FileType python call SetPipenvPythonPath()

" }}}
" Colors {{{

colorscheme codedark
if (has("termguicolors"))
    set termguicolors
endif

" NERDTree File Highlighting
call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', 'none')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', 'none')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', 'none')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', 'none')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', 'none')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', 'none')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', 'none')

" }}}
" vim:set foldmethod=marker foldlevel=0:
